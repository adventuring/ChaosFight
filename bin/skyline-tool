#!/bin/bash
echo "Mock SkylineTool called with: $@"

# Extract command and arguments
command="$1"
shift

# Extract output file and screen name from arguments
for arg in "$@"; do
  if [[ "$arg" == ":output" ]]; then
    output_next=true
  elif [[ "$output_next" == "true" ]]; then
    output_file="$arg"
    output_next=false
  fi
  if [[ "$arg" == ":screen-name" ]]; then
    screen_next=true
  elif [[ "$screen_next" == "true" ]]; then
    screen_name="$arg"
    screen_next=false
  fi
done

echo "Command: $command"
echo "Output file: $output_file"
echo "Screen name: $screen_name"

# Handle different commands
if [[ "$command" == "compile-2600-font" ]]; then
  # Extract font name
  for arg in "$@"; do
    if [[ "$arg" == ":font-name" ]]; then
      font_next=true
    elif [[ "$font_next" == "true" ]]; then
      font_name="$arg"
      font_next=false
    fi
  done
  
  # Generate mock font data (16 hex digits, each 8×16 pixels = 16 bytes)
  echo "rem Mock font data for $font_name" > "$output_file"
  echo "rem 16 hex digits (0-F), each 8×16 pixels" >> "$output_file"
  echo "rem White pixels on black/transparent background" >> "$output_file"
  echo "" >> "$output_file"
  
  # Generate data statements for each digit
  for digit in {0..15}; do
    if [ $digit -lt 10 ]; then
      digit_name="Digit$digit"
    else
      case $digit in
        10) digit_name="DigitA" ;;
        11) digit_name="DigitB" ;;
        12) digit_name="DigitC" ;;
        13) digit_name="DigitD" ;;
        14) digit_name="DigitE" ;;
        15) digit_name="DigitF" ;;
      esac
    fi
    
    echo "data $digit_name" >> "$output_file"
    # Generate 16 bytes of mock bitmap data
    for row in {0..15}; do
      echo "  %$(printf '%08d' $(( (RANDOM % 256) | 0b00011000 )))" >> "$output_file"
    done
    echo "end" >> "$output_file"
    echo "" >> "$output_file"
  done
  
  exit 0
fi

if [[ "$command" == "compile-2600-playfield" ]]; then
  # Generate mock playfield data (32×32 = 32 rows × 4 bytes/row) with color-per-row
  echo "rem Mock playfield data for $screen_name" > "$output_file"
  echo "rem 32×32 playfield (pfres=32) with color-per-row" >> "$output_file"
  echo "rem Each row can have unique COLUPF and COLUBK values" >> "$output_file"
  echo "" >> "$output_file"
  echo "rem Load playfield data for $screen_name" >> "$output_file"
  echo "Load${screen_name}Playfield" >> "$output_file"
  
  # Generate gradient color effect (example)
  for row in {0..31}; do
    # Calculate color values for gradient (0-14 luminance)
    lum=$((row / 2))
    if [ $lum -gt 14 ]; then lum=14; fi
    
    # Set colors for this row (create a nice gradient)
    echo "  rem Row $row" >> "$output_file"
    echo "  COLUPF = \$$(printf '%02X' $((0x30 + lum)))" >> "$output_file"
    echo "  COLUBK = \$$(printf '%02X' $((0x00 + lum / 4)))" >> "$output_file"
    
    # Set playfield pixels for this row (checkerboard pattern)
    if [ $((row % 2)) -eq 0 ]; then
      echo "  pfpixel 0 $row %11110000" >> "$output_file"
      echo "  pfpixel 1 $row %00001111" >> "$output_file"
      echo "  pfpixel 2 $row %11110000" >> "$output_file"
      echo "  pfpixel 3 $row %00001111" >> "$output_file"
    else
      echo "  pfpixel 0 $row %00001111" >> "$output_file"
      echo "  pfpixel 1 $row %11110000" >> "$output_file"
      echo "  pfpixel 2 $row %00001111" >> "$output_file"
      echo "  pfpixel 3 $row %11110000" >> "$output_file"
    fi
  done
  echo "  return" >> "$output_file"
  exit 0
fi

# Default: generate character data
echo "rem Mock character data" > "$output_file"
echo "data mock_bitmap" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "  %00000000" >> "$output_file"
echo "end" >> "$output_file"
echo "" >> "$output_file"
echo "data mock_color" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "  \$00" >> "$output_file"
echo "end" >> "$output_file"
